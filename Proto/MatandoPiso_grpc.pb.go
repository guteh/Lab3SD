// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0--rc1
// source: Proto/MatandoPiso.proto

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MercDirClient is the client API for MercDir service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MercDirClient interface {
	MensajeDirector(ctx context.Context, in *MercenarioMensaje, opts ...grpc.CallOption) (*DirectorMensaje, error)
}

type mercDirClient struct {
	cc grpc.ClientConnInterface
}

func NewMercDirClient(cc grpc.ClientConnInterface) MercDirClient {
	return &mercDirClient{cc}
}

func (c *mercDirClient) MensajeDirector(ctx context.Context, in *MercenarioMensaje, opts ...grpc.CallOption) (*DirectorMensaje, error) {
	out := new(DirectorMensaje)
	err := c.cc.Invoke(ctx, "/Proto.MercDir/MensajeDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MercDirServer is the server API for MercDir service.
// All implementations must embed UnimplementedMercDirServer
// for forward compatibility
type MercDirServer interface {
	MensajeDirector(context.Context, *MercenarioMensaje) (*DirectorMensaje, error)
	mustEmbedUnimplementedMercDirServer()
}

// UnimplementedMercDirServer must be embedded to have forward compatible implementations.
type UnimplementedMercDirServer struct {
}

func (UnimplementedMercDirServer) MensajeDirector(context.Context, *MercenarioMensaje) (*DirectorMensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MensajeDirector not implemented")
}
func (UnimplementedMercDirServer) mustEmbedUnimplementedMercDirServer() {}

// UnsafeMercDirServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MercDirServer will
// result in compilation errors.
type UnsafeMercDirServer interface {
	mustEmbedUnimplementedMercDirServer()
}

func RegisterMercDirServer(s grpc.ServiceRegistrar, srv MercDirServer) {
	s.RegisterService(&MercDir_ServiceDesc, srv)
}

func _MercDir_MensajeDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MercenarioMensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercDirServer).MensajeDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proto.MercDir/MensajeDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercDirServer).MensajeDirector(ctx, req.(*MercenarioMensaje))
	}
	return interceptor(ctx, in, info, handler)
}

// MercDir_ServiceDesc is the grpc.ServiceDesc for MercDir service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MercDir_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Proto.MercDir",
	HandlerType: (*MercDirServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MensajeDirector",
			Handler:    _MercDir_MensajeDirector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/MatandoPiso.proto",
}
